from django.shortcuts import render, redirect
from django.http import JsonResponse
import json
from .models import (
    SiteConfiguration, MenuItem, SectionBackground, Service, 
    ServiceCategoryInfo, Advantage, Result, Testimonial, AlgorithmStep, 
    FAQ, Bonus, ContactRequest, HeroBanner
)
from django.views.decorators.csrf import csrf_exempt, csrf_protect
import requests

TELEGRAM_BOT_TOKEN = '7917246585:AAHMkFc-evJtNonTbUmRxbYxBwWh_Uj9kOw'
TELEGRAM_CHAT_ID = '-4840238372'  # chat_id –≥—Ä—É–ø–∏

def send_telegram_notification(name, phone, situation):
    message = f'üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É!\n\nüë§ –Ü–º º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìù –°–∏—Ç—É–∞—Ü—ñ—è: {situation}'
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    data = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML',
    }
    try:
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        pass  # –ù–µ –±–ª–æ–∫—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª

# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –±—É–¥–µ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
def index_view(request):
    site_config = SiteConfiguration.get_solo()
    menu_items = MenuItem.objects.all()
    divorce_services = Service.objects.filter(category='DIVORCE')
    alimony_services = Service.objects.filter(category='ALIMONY')
    divorce_info = ServiceCategoryInfo.objects.filter(category='DIVORCE').first()
    alimony_info = ServiceCategoryInfo.objects.filter(category='ALIMONY').first()
    advantages = Advantage.objects.all()
    results = Result.objects.all()
    testimonials = Testimonial.objects.filter(is_published=True)
    algorithm_steps = AlgorithmStep.objects.all()
    faqs = FAQ.objects.filter(is_published=True)
    bonuses = Bonus.objects.filter(is_active=True)
    backgrounds_qs = SectionBackground.objects.all()
    backgrounds = {bg.name: bg.background_image.url for bg in backgrounds_qs}
    hero_banner = HeroBanner.get_solo()   
    header_carousel_texts = [
        site_config.header_carousel_text_1,
        site_config.header_carousel_text_2,
        site_config.header_carousel_text_3,
    ]

    context = {
        'site_config': site_config,
        'menu_items': menu_items,
        'header_carousel_texts': header_carousel_texts,
        'divorce_services': divorce_services,
        'alimony_services': alimony_services,
        'divorce_info': divorce_info,
        'alimony_info': alimony_info,
        'advantages': advantages,
        'results': results,
        'testimonials': testimonials,
        'algorithm_steps': algorithm_steps,
        'faqs': faqs,
        'bonuses': bonuses,
        'backgrounds': backgrounds,
        'hero': hero_banner,    
    }
    return render(request, 'index.html', context)

# ‚ñº‚ñº‚ñº –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏ ‚ñº‚ñº‚ñº
def submit_contact_form(request):
    if request.method == 'POST':
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç—ñ–ª–∞ POST-–∑–∞–ø–∏—Ç—É
            data = json.loads(request.body)
            situation = data.get('situation')
            name = data.get('name')
            phone = data.get('phone')

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            ContactRequest.objects.create(
                situation=situation,
                name=name,
                phone_number=phone
            )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É Telegram
            send_telegram_notification(name, phone, situation)
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return JsonResponse({'status': 'success', 'message': '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!'})
        except Exception as e:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–º–∏–ª–∫–æ—é–ø–∏
            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)
    
    # –Ø–∫—â–æ —Ü–µ –Ω–µ POST-–∑–∞–ø–∏—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    return JsonResponse({'status': 'error', 'message': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É'}, status=405)

@csrf_protect
def submit_testimonial(request):
    if request.method == 'POST':
        author = request.POST.get('author', '').strip()
        text = request.POST.get('text', '').strip()
        if not author or not text:
            if request.headers.get('x-requested-with') == 'XMLHttpRequest':
                return JsonResponse({'status': 'error', 'message': '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.'}, status=400)
            return render(request, 'testimonial_result.html', {'message': '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.'})
        Testimonial.objects.create(author=author, text=text, is_published=False)
        if request.headers.get('x-requested-with') == 'XMLHttpRequest':
            return JsonResponse({'status': 'success', 'message': '–í—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ü—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–Ω –∑ º—è–≤–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç—ñ.'})
        return render(request, 'testimonial_result.html', {'message': '–í—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ü—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–Ω –∑ º—è–≤–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç—ñ.'})
    return redirect('/')